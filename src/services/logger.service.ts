/**
 * Logger Service
 * Centralized logging with consistent formatting
 */

export class LoggerService {
  private static getTimestamp(): string {
    return new Date().toISOString();
  }

  static info(message: string, context?: string): void {
    const timestamp = this.getTimestamp();
    const contextStr = context ? ` [${context}]` : '';
    console.log(`[${timestamp}]${contextStr} ‚ÑπÔ∏è  ${message}`);
  }

  static success(message: string, context?: string): void {
    const contextStr = context ? ` [${context}]` : '';
    console.log(`${contextStr} ‚úÖ ${message}`);
  }

  static error(message: string, context?: string): void {
    const contextStr = context ? ` [${context}]` : '';
    console.error(`${contextStr} ‚ùå ${message}`);
  }

  static warn(message: string, context?: string): void {
    const contextStr = context ? ` [${context}]` : '';
    console.warn(`${contextStr} ‚ö†Ô∏è  ${message}`);
  }

  static test(testName: string, details?: string): void {
    const timestamp = this.getTimestamp();
    const detailsStr = details ? ` ${details}` : '';
    console.log(`[${timestamp}] üß™ ${testName}${detailsStr}`);
  }

  static debug(message: string, data?: any): void {
    if (__ENV.DEBUG === 'true') {
      const timestamp = this.getTimestamp();
      console.log(`[${timestamp}] üîç ${message}`);
      if (data) {
        console.log(JSON.stringify(data, null, 2));
      }
    }
  }

  static metric(metricName: string, value: number | string, unit?: string): void {
    const unitStr = unit ? ` ${unit}` : '';
    console.log(`üìä ${metricName}: ${value}${unitStr}`);
  }

  static separator(char: string = '‚ïê', length: number = 60): void {
    console.log(char.repeat(length));
  }

  static header(title: string): void {
    this.separator('‚ïê');
    console.log(`‚ïë  ${title.padEnd(56)}  ‚ïë`);
    this.separator('‚ïê');
  }

  static section(title: string): void {
    console.log('');
    console.log(`‚ñ∂Ô∏è  ${title}`);
    console.log('‚îÄ'.repeat(60));
  }
}

